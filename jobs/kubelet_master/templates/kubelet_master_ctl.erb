#!/bin/bash

<%
  def public_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end
%>

RUN_DIR=/var/vcap/sys/run/kubelet_master
LOG_DIR=/var/vcap/sys/log/kubelet_master
PIDFILE=$RUN_DIR/kubelet_master.pid

source /var/vcap/packages/kubernetes-common/utils.sh

wait_for_available() {
  for i in $(seq <%= p("kubernetes.kubelet_master.startup_timeout_in_seconds") %>); do
    if curl http://127.0.0.1:8080/version | grep major; then
      synced=true
      break
    fi
    sleep 1
  done
}

case $1 in

  start)
    pid_guard $PIDFILE "kubelet_master"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR

    /var/vcap/packages/kubelet/bin/kubelet \
        --api_servers=http://127.0.0.1:8080 \
        --register-node=false \
        --allow-privileged=true \
        --config=<%= p("kubernetes.kubelet_master.pod_manifest_dirs.bootstrap") %> \
        --hostname-override=<%= public_ip %> \
        --cluster_dns=<%= p("kubernetes.kubelet_master.services.dns_ip") %> \
        --cluster_domain=cluster.local \
        --cadvisor-port=0 &

    kubelet_pid=$!

    synced=false
    wait_for_available # mutates $synced

    if ${synced}; then
      curl -XPOST -d'{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"kube-system"}}' "http://127.0.0.1:8080/api/v1/namespaces" || true

      echo ${kubelet_pid} > ${PIDFILE}
      wait ${kubelet_pid}
    else
      kill -9 ${kubelet_pid}
      exit 1
    fi

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: kubelet_master {start|stop}"

    ;;

esac

