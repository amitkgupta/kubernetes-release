#!/bin/bash

<%
  def public_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end
%>

RUN_DIR=/var/vcap/sys/run/kubelet_worker
LOG_DIR=/var/vcap/sys/log/kubelet_worker
PIDFILE=$RUN_DIR/kubelet_worker.pid

source /var/vcap/packages/kubernetes-common/utils.sh

case $1 in

  start)
    chmod 600 <%= p("kubernetes.kubelet_worker.ssl_dir") %>/worker-key.pem

    pid_guard $PIDFILE "kubelet_worker"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR

    echo $$ > $PIDFILE

    chmod +x /var/vcap/packages/kubelet/bin/kubelet
    exec /var/vcap/packages/kubelet/bin/kubelet \
      --api_servers=https://<%= p("kubernetes.kubelet_worker.master_host") %> \
      --register-node=true \
      --allow-privileged=true \
      --config=<%= p("kubernetes.kubelet_worker.pod_manifest_dir") %> \
      --hostname-override=<%= public_ip %> \
      --cluster_dns=<%= p("kubernetes.kubelet_worker.services.dns_ip") %> \
      --cluster_domain=cluster.local \
      --kubeconfig=<%= p("kubernetes.kubelet_worker.config_dir") %>/worker-kubelet-config.yaml \
      --tls-cert-file=<%= p("kubernetes.kubelet_worker.ssl_dir") %>/worker.pem \
      --tls-private-key-file=<%= p("kubernetes.kubelet_worker.ssl_dir") %>/worker-key.pem \
      --cadvisor-port=0

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: kubelet_worker {start|stop}"

    ;;

esac

